{
	"_method_": {
		"WP SwitchToolbar": {
			"Syntax": "**WP SwitchToolbar**()",
			"Params": [],
			"Summary": ""
		},
		"WP UpdateWidget": {
			"Syntax": "**WP UpdateWidget**( *widgetName* : Text; *areaName* : Text; *skin* : Object )",
			"Params": [
				[
					"widgetName",
					"Text",
					"->"
				],
				[
					"areaName",
					"Text",
					"->"
				],
				[
					"skin",
					"Object",
					"->"
				]
			],
			"Summary": ""
		},
		"WP PictureSettings": {
			"Syntax": "**WP PictureSettings**( *object* : Object )",
			"Params": [
				[
					"object",
					"Object",
					"->"
				]
			],
			"Summary": ""
		},
		"WP_TableWizardNew": {
			"Syntax": "**WP_TableWizardNew**()->wizard : cs.writeProInterface.TableWizard",
			"Params": [
				[
					"wizard",
					"cs.writeProInterface.TableWizard",
					"<-"
				]
			],
			"Summary": ""
		},
		"WP FormulaSettings": {
			"Syntax": "**WP FormulaSettings**( *range* : Object )",
			"Params": [
				[
					"range",
					"Object",
					"->"
				]
			],
			"Summary": ""
		},
		"WP ShowTabPages": {
			"Syntax": "**WP ShowTabPages**()",
			"Params": [],
			"Summary": ""
		}
	},
	"cs.writeProInterface": {
		"HList": {
			"new()": {
				"Syntax": "**.new**()",
				"Params": [],
				"Summary": ""
			}
		},
		"color": {
			"new()": {
				"Syntax": "**.new**( *color* : Variant )",
				"Params": [
					[
						"color",
						"Variant",
						"->"
					]
				],
				"Summary": ""
			}
		},
		"Toolbar": {
			"new()": {
				"Syntax": "**.new**( *allButtonNames* : Collection; *container* : Text )",
				"Params": [
					[
						"allButtonNames",
						"Collection",
						"->"
					],
					[
						"container",
						"Text",
						"->"
					]
				],
				"Summary": ""
			}
		},
		"preferences": {
			"new()": {
				"Syntax": "**.new**()",
				"Params": [],
				"Summary": ""
			}
		},
		"TableWizard": {
			"new()": {
				"Syntax": "**.new**( *formName* : Text )",
				"Params": [
					[
						"formName",
						"Text",
						"->"
					]
				],
				"Summary": ""
			}
		}
	},
	"HList": {
		"countItems()": {
			"Syntax": "**.countItems**( *visible* : Boolean )->count : Integer",
			"Params": [
				[
					"visible",
					"Boolean",
					"->"
				],
				[
					"count",
					"Integer",
					"<-"
				]
			],
			"Summary": ""
		},
		"filter()": {
			"Syntax": "**.filter**( *filter* : Collection )",
			"Params": [
				[
					"filter",
					"Collection",
					"->"
				]
			],
			"Summary": ""
		},
		"setProperties()": {
			"Syntax": "**.setProperties**( *itemRef* : Integer; *enterable* : Boolean; *style* : Integer; *iconPath* : Text; *color* : Integer )",
			"Params": [
				[
					"itemRef",
					"Integer",
					"->"
				],
				[
					"enterable",
					"Boolean",
					"->"
				],
				[
					"style",
					"Integer",
					"->"
				],
				[
					"iconPath",
					"Text",
					"->"
				],
				[
					"color",
					"Integer",
					"->"
				]
			],
			"Summary": ""
		},
		"setParameter()": {
			"Syntax": "**.setParameter**( *itemRef* : Integer; *paramName* : Text; *paramValue* : Text )",
			"Params": [
				[
					"itemRef",
					"Integer",
					"->"
				],
				[
					"paramName",
					"Text",
					"->"
				],
				[
					"paramValue",
					"Text",
					"->"
				]
			],
			"Summary": ""
		},
		"expandAll()": {
			"Syntax": "**.expandAll**()",
			"Params": [],
			"Summary": ""
		},
		"reset()": {
			"Syntax": "**.reset**()",
			"Params": [],
			"Summary": ""
		},
		"expandItem()": {
			"Syntax": "**.expandItem**( *id* : Integer )",
			"Params": [
				[
					"id",
					"Integer",
					"->"
				]
			],
			"Summary": ""
		},
		"clone()": {
			"Syntax": "**.clone**()->clone : Object",
			"Params": [
				[
					"clone",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"clear()": {
			"Syntax": "**.clear**()",
			"Params": [],
			"Summary": ""
		},
		"findInParameter()": {
			"Syntax": "**.findInParameter**( *paramName* : Text; *paramValue* : Text )",
			"Params": [
				[
					"paramName",
					"Text",
					"->"
				],
				[
					"paramValue",
					"Text",
					"->"
				]
			],
			"Summary": ""
		},
		"append()": {
			"Syntax": "**.append**( *label* : Text; *itemRef* : Integer; *sublist* : Integer; *expanded* : Boolean )",
			"Params": [
				[
					"label",
					"Text",
					"->"
				],
				[
					"itemRef",
					"Integer",
					"->"
				],
				[
					"sublist",
					"Integer",
					"->"
				],
				[
					"expanded",
					"Boolean",
					"->"
				]
			],
			"Summary": ""
		}
	},
	"color": {
		"fontColor()": {
			"Syntax": "**.fontColor**( *backgroundColor* : Variant; *green* : Integer; *blue* : Integer ) : Text",
			"Params": [
				[
					"backgroundColor",
					"Variant",
					"->"
				],
				[
					"green",
					"Integer",
					"->"
				],
				[
					"blue",
					"Integer",
					"->"
				],
				[
					"",
					"Text",
					"<-"
				]
			],
			"Summary": ""
		},
		"isValid()": {
			"Syntax": "**.isValid**() : Boolean",
			"Params": [
				[
					"",
					"Boolean",
					"<-"
				]
			],
			"Summary": ""
		},
		"rgbToColor()": {
			"Syntax": "**.rgbToColor**( *rgb* : Object ) : Integer",
			"Params": [
				[
					"rgb",
					"Object",
					"->"
				],
				[
					"",
					"Integer",
					"<-"
				]
			],
			"Summary": ""
		},
		"colorPicker()": {
			"Syntax": "**.colorPicker**() : Integer",
			"Params": [
				[
					"",
					"Integer",
					"<-"
				]
			],
			"Summary": ""
		},
		"hslToCss()": {
			"Syntax": "**.hslToCss**( *hsl* : Object ) : Text",
			"Params": [
				[
					"hsl",
					"Object",
					"->"
				],
				[
					"",
					"Text",
					"<-"
				]
			],
			"Summary": ""
		},
		"rgbToHSL()": {
			"Syntax": "**.rgbToHSL**( *rgb* : Object ) : Object",
			"Params": [
				[
					"rgb",
					"Object",
					"->"
				],
				[
					"",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"hslToColor()": {
			"Syntax": "**.hslToColor**( *hsl* : Object ) : Integer",
			"Params": [
				[
					"hsl",
					"Object",
					"->"
				],
				[
					"",
					"Integer",
					"<-"
				]
			],
			"Summary": ""
		},
		"colorToHSL()": {
			"Syntax": "**.colorToHSL**( *color* : Integer ) : Object",
			"Params": [
				[
					"color",
					"Integer",
					"->"
				],
				[
					"",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"colorToRGB()": {
			"Syntax": "**.colorToRGB**( *color* : Variant ) : Object",
			"Params": [
				[
					"color",
					"Variant",
					"->"
				],
				[
					"",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"hslToRGB()": {
			"Syntax": "**.hslToRGB**( *hsl* : Object ) : Object",
			"Params": [
				[
					"hsl",
					"Object",
					"->"
				],
				[
					"",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"setColor()": {
			"Syntax": "**.setColor**( *color* : Integer ) : cs.writeProInterface.color",
			"Params": [
				[
					"color",
					"Integer",
					"->"
				],
				[
					"",
					"cs.writeProInterface.color",
					"<-"
				]
			],
			"Summary": ""
		},
		"setHSL()": {
			"Syntax": "**.setHSL**( *hsl* : Object ) : cs.writeProInterface.color",
			"Params": [
				[
					"hsl",
					"Object",
					"->"
				],
				[
					"",
					"cs.writeProInterface.color",
					"<-"
				]
			],
			"Summary": ""
		},
		"setColorIndexed()": {
			"Syntax": "**.setColorIndexed**( *color* : Integer ) : cs.writeProInterface.color",
			"Params": [
				[
					"color",
					"Integer",
					"->"
				],
				[
					"",
					"cs.writeProInterface.color",
					"<-"
				]
			],
			"Summary": ""
		},
		"getMatchingColors()": {
			"Syntax": "**.getMatchingColors**( *kind* : Integer ) : Collection",
			"Params": [
				[
					"kind",
					"Integer",
					"->"
				],
				[
					"",
					"Collection",
					"<-"
				]
			],
			"Summary": ""
		},
		"setCSS()": {
			"Syntax": "**.setCSS**( *css* : Text ) : cs.writeProInterface.color",
			"Params": [
				[
					"css",
					"Text",
					"->"
				],
				[
					"",
					"cs.writeProInterface.color",
					"<-"
				]
			],
			"Summary": ""
		},
		"setRGB()": {
			"Syntax": "**.setRGB**( *rgb* : Object ) : cs.writeProInterface.color",
			"Params": [
				[
					"rgb",
					"Object",
					"->"
				],
				[
					"",
					"cs.writeProInterface.color",
					"<-"
				]
			],
			"Summary": ""
		},
		"colorToCSS()": {
			"Syntax": "**.colorToCSS**( *color* : Integer; *type* : Text ) : Variant",
			"Params": [
				[
					"color",
					"Integer",
					"->"
				],
				[
					"type",
					"Text",
					"->"
				],
				[
					"",
					"Variant",
					"<-"
				]
			],
			"Summary": ""
		}
	},
	"Toolbar": {
		"activate()": {
			"Syntax": "**.activate**( *btnName* : Text )",
			"Params": [
				[
					"btnName",
					"Text",
					"->"
				]
			],
			"Summary": ""
		},
		"setColors()": {
			"Syntax": "**.setColors**( *fontColor* : Integer; *backgroundColor* : Integer; *separatorFontColor* : Integer; *separatorColor* : Integer )",
			"Params": [
				[
					"fontColor",
					"Integer",
					"->"
				],
				[
					"backgroundColor",
					"Integer",
					"->"
				],
				[
					"separatorFontColor",
					"Integer",
					"->"
				],
				[
					"separatorColor",
					"Integer",
					"->"
				]
			],
			"Summary": ""
		},
		"setBestSize()": {
			"Syntax": "**.setBestSize**( *bestSize* : Boolean )",
			"Params": [
				[
					"bestSize",
					"Boolean",
					"->"
				]
			],
			"Summary": ""
		},
		"setButtons()": {
			"Syntax": "**.setButtons**( *_buttons* : Collection )",
			"Params": [
				[
					"_buttons",
					"Collection",
					"->"
				]
			],
			"Summary": ""
		},
		"setRect()": {
			"Syntax": "**.setRect**( *rect* : Object )",
			"Params": [
				[
					"rect",
					"Object",
					"->"
				]
			],
			"Summary": ""
		},
		"redraw()": {
			"Syntax": "**.redraw**()",
			"Params": [],
			"Summary": ""
		},
		"setBestContainer()": {
			"Syntax": "**.setBestContainer**( *bestContainer* : Text )",
			"Params": [
				[
					"bestContainer",
					"Text",
					"->"
				]
			],
			"Summary": ""
		},
		"setDirection()": {
			"Syntax": "**.setDirection**( *direction* : Text )",
			"Params": [
				[
					"direction",
					"Text",
					"->"
				]
			],
			"Summary": ""
		},
		"setLabelMargins()": {
			"Syntax": "**.setLabelMargins**( *left* : Integer; *right* : Integer )",
			"Params": [
				[
					"left",
					"Integer",
					"->"
				],
				[
					"right",
					"Integer",
					"->"
				]
			],
			"Summary": ""
		},
		"setContainer()": {
			"Syntax": "**.setContainer**( *container* : Text )",
			"Params": [
				[
					"container",
					"Text",
					"->"
				]
			],
			"Summary": ""
		},
		"setButtonMargins()": {
			"Syntax": "**.setButtonMargins**( *left* : Integer; *top* : Integer; *right* : Integer; *bottom* : Integer )",
			"Params": [
				[
					"left",
					"Integer",
					"->"
				],
				[
					"top",
					"Integer",
					"->"
				],
				[
					"right",
					"Integer",
					"->"
				],
				[
					"bottom",
					"Integer",
					"->"
				]
			],
			"Summary": ""
		},
		"setButtonSizes()": {
			"Syntax": "**.setButtonSizes**( *width* : Integer; *height* : Integer )",
			"Params": [
				[
					"width",
					"Integer",
					"->"
				],
				[
					"height",
					"Integer",
					"->"
				]
			],
			"Summary": ""
		}
	},
	"preferences": {
		"save()": {
			"Syntax": "**.save**()",
			"Params": [],
			"Summary": ""
		},
		"load()": {
			"Syntax": "**.load**()",
			"Params": [],
			"Summary": ""
		},
		"set()": {
			"Syntax": "**.set**( *key* : Text; *value* : Variant )",
			"Params": [
				[
					"key",
					"Text",
					"->"
				],
				[
					"value",
					"Variant",
					"->"
				]
			],
			"Summary": ""
		},
		"database()": {
			"Syntax": "**.database**( *fileName* : Variant ) : cs.writeProInterface.preferences",
			"Params": [
				[
					"fileName",
					"Variant",
					"->"
				],
				[
					"",
					"cs.writeProInterface.preferences",
					"<-"
				]
			],
			"Summary": ""
		},
		"sefDefault()": {
			"Syntax": "**.sefDefault**( *defaultValues* : Object )",
			"Params": [
				[
					"defaultValues",
					"Object",
					"->"
				]
			],
			"Summary": ""
		},
		"remove()": {
			"Syntax": "**.remove**( *key* : Text )",
			"Params": [
				[
					"key",
					"Text",
					"->"
				]
			],
			"Summary": ""
		},
		"session()": {
			"Syntax": "**.session**( *fileName* : Variant ) : cs.writeProInterface.preferences",
			"Params": [
				[
					"fileName",
					"Variant",
					"->"
				],
				[
					"",
					"cs.writeProInterface.preferences",
					"<-"
				]
			],
			"Summary": ""
		},
		"get()": {
			"Syntax": "**.get**( *key* : Text ) : Variant",
			"Params": [
				[
					"key",
					"Text",
					"->"
				],
				[
					"",
					"Variant",
					"<-"
				]
			],
			"Summary": ""
		},
		"user()": {
			"Syntax": "**.user**( *fileName* : Variant ) : cs.writeProInterface.preferences",
			"Params": [
				[
					"fileName",
					"Variant",
					"->"
				],
				[
					"",
					"cs.writeProInterface.preferences",
					"<-"
				]
			],
			"Summary": ""
		}
	},
	"TableWizard": {
		"WP_GetPreviousContent()": {
			"Syntax": "**.WP_GetPreviousContent**( *description* : Text; *columnID* : Integer )->document : Object",
			"Params": [
				[
					"description",
					"Text",
					"->"
				],
				[
					"columnID",
					"Integer",
					"->"
				],
				[
					"document",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"WP_BuildThemeSample()": {
			"Syntax": "**.WP_BuildThemeSample**( *template* : Collection; *areaName* : Text )->document : Object",
			"Params": [
				[
					"template",
					"Collection",
					"->"
				],
				[
					"areaName",
					"Text",
					"->"
				],
				[
					"document",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"WP_BuildTable()": {
			"Syntax": "**.WP_BuildTable**()->area : Object",
			"Params": [
				[
					"area",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"WP_BuildAll()": {
			"Syntax": "**.WP_BuildAll**( *resetBreaks* : Boolean )",
			"Params": [
				[
					"resetBreaks",
					"Boolean",
					"->"
				]
			],
			"Summary": ""
		},
		"themeGetFont()": {
			"Syntax": "**.themeGetFont**( *fontFamily* : Text )->font : Object",
			"Params": [
				[
					"fontFamily",
					"Text",
					"->"
				],
				[
					"font",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"themeMeta()": {
			"Syntax": "**.themeMeta**( *row* : Variant )->meta : Object",
			"Params": [
				[
					"row",
					"Variant",
					"->"
				],
				[
					"meta",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"themeExists()": {
			"Syntax": "**.themeExists**( *name* : Text )->exists : Boolean",
			"Params": [
				[
					"name",
					"Text",
					"->"
				],
				[
					"exists",
					"Boolean",
					"<-"
				]
			],
			"Summary": ""
		},
		"themeFromCollection()": {
			"Syntax": "**.themeFromCollection**( *collection* : Collection )->theme : Object",
			"Params": [
				[
					"collection",
					"Collection",
					"->"
				],
				[
					"theme",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"themeToCollection()": {
			"Syntax": "**.themeToCollection**( *theme* : Object; *listboxName* : Text )->collection : Collection",
			"Params": [
				[
					"theme",
					"Object",
					"->"
				],
				[
					"listboxName",
					"Text",
					"->"
				],
				[
					"collection",
					"Collection",
					"<-"
				]
			],
			"Summary": ""
		},
		"themeUI()": {
			"Syntax": "**.themeUI**()",
			"Params": [],
			"Summary": ""
		},
		"themeApply()": {
			"Syntax": "**.themeApply**( *area* : Object; *areaName* : Text )",
			"Params": [
				[
					"area",
					"Object",
					"->"
				],
				[
					"areaName",
					"Text",
					"->"
				]
			],
			"Summary": ""
		},
		"themeNormalize()": {
			"Syntax": "**.themeNormalize**( *theme* : Object )",
			"Params": [
				[
					"theme",
					"Object",
					"->"
				]
			],
			"Summary": ""
		},
		"themeFillMissing()": {
			"Syntax": "**.themeFillMissing**( *fillMe* : Object; *reference* : Object )",
			"Params": [
				[
					"fillMe",
					"Object",
					"->"
				],
				[
					"reference",
					"Object",
					"->"
				]
			],
			"Summary": ""
		},
		"templateUI()": {
			"Syntax": "**.templateUI**( *action* : Text )",
			"Params": [
				[
					"action",
					"Text",
					"->"
				]
			],
			"Summary": ""
		},
		"formulaUI()": {
			"Syntax": "**.formulaUI**( *action* : Text; *formatType* : Integer; *insert* : Object )",
			"Params": [
				[
					"action",
					"Text",
					"->"
				],
				[
					"formatType",
					"Integer",
					"->"
				],
				[
					"insert",
					"Object",
					"->"
				]
			],
			"Summary": ""
		},
		"themeEdit()": {
			"Syntax": "**.themeEdit**( *theme* : Object )",
			"Params": [
				[
					"theme",
					"Object",
					"->"
				]
			],
			"Summary": ""
		},
		"templateGet()": {
			"Syntax": "**.templateGet**( *index* : Integer )->template : Object",
			"Params": [
				[
					"index",
					"Integer",
					"->"
				],
				[
					"template",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"themeGet()": {
			"Syntax": "**.themeGet**( *index* : Integer )->theme : Object",
			"Params": [
				[
					"index",
					"Integer",
					"->"
				],
				[
					"theme",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"formulaInsert()": {
			"Syntax": "**.formulaInsert**( *insert* : Object )",
			"Params": [
				[
					"insert",
					"Object",
					"->"
				]
			],
			"Summary": ""
		},
		"templateDropDownList()": {
			"Syntax": "**.templateDropDownList**()->dropDownlist : Object",
			"Params": [
				[
					"dropDownlist",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"themeSave()": {
			"Syntax": "**.themeSave**( *theme* : Object; *fileName* : Text )->index : Integer",
			"Params": [
				[
					"theme",
					"Object",
					"->"
				],
				[
					"fileName",
					"Text",
					"->"
				],
				[
					"index",
					"Integer",
					"<-"
				]
			],
			"Summary": ""
		},
		"templateGetList()": {
			"Syntax": "**.templateGetList**()->collection : Collection",
			"Params": [
				[
					"collection",
					"Collection",
					"<-"
				]
			],
			"Summary": ""
		},
		"themeGetFontFamily()": {
			"Syntax": "**.themeGetFontFamily**()->fontFamilly : Object",
			"Params": [
				[
					"fontFamilly",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"themeGetList()": {
			"Syntax": "**.themeGetList**()->collection : Collection",
			"Params": [
				[
					"collection",
					"Collection",
					"<-"
				]
			],
			"Summary": ""
		},
		"formulaBuildDynamic()": {
			"Syntax": "**.formulaBuildDynamic**( *context* : Object; *contextName* : Text; *contextNameTranslated* : Text; *itemRef* : Integer; *linksLevel* : Integer )->hlist : cs.writeProInterface.HList",
			"Params": [
				[
					"context",
					"Object",
					"->"
				],
				[
					"contextName",
					"Text",
					"->"
				],
				[
					"contextNameTranslated",
					"Text",
					"->"
				],
				[
					"itemRef",
					"Integer",
					"->"
				],
				[
					"linksLevel",
					"Integer",
					"->"
				],
				[
					"hlist",
					"cs.writeProInterface.HList",
					"<-"
				]
			],
			"Summary": ""
		},
		"themeDropDownList()": {
			"Syntax": "**.themeDropDownList**( *translate* : Variant )->dropDownList : Object",
			"Params": [
				[
					"translate",
					"Variant",
					"->"
				],
				[
					"dropDownList",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"WP_MemoTableContent()": {
			"Syntax": "**.WP_MemoTableContent**()",
			"Params": [],
			"Summary": ""
		},
		"formulaBuildStatic()": {
			"Syntax": "**.formulaBuildStatic**( *context* : Object; *contextName* : Text; *formula* : Text; *itemRef* : Integer )->hlist : cs.writeProInterface.HList",
			"Params": [
				[
					"context",
					"Object",
					"->"
				],
				[
					"contextName",
					"Text",
					"->"
				],
				[
					"formula",
					"Text",
					"->"
				],
				[
					"itemRef",
					"Integer",
					"->"
				],
				[
					"hlist",
					"cs.writeProInterface.HList",
					"<-"
				]
			],
			"Summary": ""
		},
		"themeGetDefault()": {
			"Syntax": "**.themeGetDefault**( *theme* : Object; *attribute* : Text )->value : Variant",
			"Params": [
				[
					"theme",
					"Object",
					"->"
				],
				[
					"attribute",
					"Text",
					"->"
				],
				[
					"value",
					"Variant",
					"<-"
				]
			],
			"Summary": ""
		},
		"translate()": {
			"Syntax": "**.translate**( *type* : Text; *name* : Text; *keepOriginal* : Boolean )->translation : Text",
			"Params": [
				[
					"type",
					"Text",
					"->"
				],
				[
					"name",
					"Text",
					"->"
				],
				[
					"keepOriginal",
					"Boolean",
					"->"
				],
				[
					"translation",
					"Text",
					"<-"
				]
			],
			"Summary": ""
		}
	}
}